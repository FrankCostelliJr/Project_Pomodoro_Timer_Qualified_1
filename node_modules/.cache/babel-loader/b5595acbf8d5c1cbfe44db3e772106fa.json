{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeDisplay.js\";\nimport React from 'react';\n\nfunction TimeDisplay(props) {\n  const {\n    activeSession,\n    onBreak,\n    secondsToDuration,\n    minutesToDuration,\n    initFocusMins,\n    initBreakMins,\n    currentTimerMins,\n    currentTimerSecs,\n    isTimerRunning,\n    progressBar\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: activeSession ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, !onBreak ? \"Focusing\" : \"On Break\", \" for \", !onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, secondsToDuration(currentTimerMins * 60 + currentTimerSecs), \" remaining\"), !isTimerRunning ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 28\n    }\n  }, \"PAUSED\") : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default TimeDisplay;","map":{"version":3,"sources":["C:/Users/frank/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeDisplay.js"],"names":["React","TimeDisplay","props","activeSession","onBreak","secondsToDuration","minutesToDuration","initFocusMins","initBreakMins","currentTimerMins","currentTimerSecs","isTimerRunning","progressBar","display","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAE1B,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,aANI;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA,gBARI;AASJC,IAAAA,cATI;AAUJC,IAAAA;AAVI,MAWFV,KAXJ;AAcA,sBACE;AAAK,IAAA,KAAK,EAAEC,aAAa,GAAG;AAACU,MAAAA,OAAO,EAAE;AAAV,KAAH,GAAwB;AAACA,MAAAA,OAAO,EAAE;AAAV,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAACT,OAAD,GAAW,UAAX,GAAwB,UADzB,WAC0C,CAACA,OAAD,GAAWE,iBAAiB,CAACC,aAAD,CAA5B,GAA8CD,iBAAiB,CAACE,aAAD,CADzG,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,iBAAiB,CAAEI,gBAAgB,GAAG,EAApB,GAA0BC,gBAA3B,CADpB,eANF,EASG,CAACC,cAAD,gBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlB,GAAoC,IATvC,CADF,CAFA,eAeA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEG,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeF,WALjB,CAK8B;AAL9B;AAME,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAG,GAAEH,WAAY;AAAxB,KANT,CAMuC;AANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAfA,CADF;AAgCD;;AAED,eAAeX,WAAf","sourcesContent":["import React from 'react'\r\n\r\nfunction TimeDisplay(props) {\r\n\r\n  const {\r\n    activeSession,\r\n    onBreak,\r\n    secondsToDuration,\r\n    minutesToDuration,\r\n    initFocusMins,\r\n    initBreakMins,\r\n    currentTimerMins,\r\n    currentTimerSecs,\r\n    isTimerRunning,\r\n    progressBar\r\n  } = props;\r\n\r\n\r\n  return (\r\n    <div style={activeSession ? {display: 'block'} : {display: 'none'}}>\r\n    {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n        <h2 data-testid=\"session-title\">\r\n        {!onBreak ? \"Focusing\" : \"On Break\"} for {!onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins)} minutes\r\n        </h2>\r\n        {/* TODO: Update message below to include time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {secondsToDuration((currentTimerMins * 60) + currentTimerSecs)} remaining\r\n        </p>\r\n        {!isTimerRunning ? <h2>PAUSED</h2> : null}\r\n      </div>\r\n    </div>\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n          <div\r\n            className=\"progress-bar\"\r\n            role=\"progressbar\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            aria-valuenow={progressBar} // TODO: Increase aria-valuenow as elapsed time increases\r\n            style={{ width: `${progressBar}%` }} // TODO: Increase width % as elapsed time increases\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div> \r\n  )\r\n}\r\n\r\nexport default TimeDisplay\r\n"]},"metadata":{},"sourceType":"module"}