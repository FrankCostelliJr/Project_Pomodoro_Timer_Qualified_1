{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from '../utils/duration';\nimport { minutesToDuration } from '../utils/duration';\nimport Break from './Break';\nimport Focus from './Focus';\nimport TimerControls from './TimerControls';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5);\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5);\n  const [timerMins, setTimerMins] = useState(25);\n  const [timerSecs, setTimerSecs] = useState(0);\n  const [progressBar, setProgressBar] = useState(0); // Session States:\n\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false); // Handle focus timer buttons:\n\n  const decreaseFocusTimer = () => {\n    if (focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  };\n\n  const increaseFocusTimer = () => {\n    if (focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }; // Handle break timer buttons:\n\n\n  const decreaseBreakTimer = () => {\n    if (breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  };\n\n  const increaseBreakTimer = () => {\n    if (breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  };\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setTimerSecs(second => {\n      //If the timer is zero restart, else subtract 1 second\n      if (second === 0) {\n        second = 59;\n      } else {\n        second -= 1;\n      }\n\n      return second;\n    });\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Focusing for 25:00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"25:00 remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/frank/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","minutesToDuration","Break","Focus","TimerControls","Pomodoro","isTimerRunning","setIsTimerRunning","focusTimerMins","setFocusTimerMins","breakTimerMins","setBreakTimerMins","initFocusMins","setInitFocusMins","initBreakMins","setInitBreakMins","timerMins","setTimerMins","timerSecs","setTimerSecs","progressBar","setProgressBar","initPlay","setInitPlay","activeSession","setActiveSession","onBreak","setOnBreak","decreaseFocusTimer","minutes","increaseFocusTimer","decreaseBreakTimer","increaseBreakTimer","second","playPause","prevState","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {secondsToDuration} from '../utils/duration';\nimport {minutesToDuration} from '../utils/duration';\nimport Break from './Break';\nimport Focus from './Focus';\nimport TimerControls from './TimerControls';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5);\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5);\n  const [timerMins, setTimerMins] = useState(25);\n  const [timerSecs, setTimerSecs] = useState(0);\n  const [progressBar, setProgressBar] = useState(0);\n\n  // Session States:\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n\n  // Handle focus timer buttons:\n  const decreaseFocusTimer = () => {\n    if(focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  }\n  const increaseFocusTimer = () => {\n    if(focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }\n\n  // Handle break timer buttons:\n  const decreaseBreakTimer = () => {\n    if(breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  }\n  const increaseBreakTimer = () => {\n    if(breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setTimerSecs(second => {\n        //If the timer is zero restart, else subtract 1 second\n        if(second === 0) {\n          second = 59;\n        } else {\n          second -= 1;\n        }\n        return second;\n      });\n      \n\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus />\n        <Break />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">Focusing for 25:00 minutes</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              25:00 remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}