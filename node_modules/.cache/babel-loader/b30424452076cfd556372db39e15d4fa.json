{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeDisplay.js\";\nimport React from 'react';\nimport { minutesToDuration } from '../utils/duration';\nimport { secondsToDuration } from '../utils/duration';\n\nfunction TimeDisplay(props) {\n  const {\n    onBreak,\n    initFocusMins,\n    initBreakMins,\n    currentTimerMins,\n    currentTimerSecs,\n    isTimerRunning\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, !onBreak ? \"Focusing\" : \"On Break\", \" for \", !onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, secondsToDuration(currentTimerMins * 60 + currentTimerSecs), \" remaining\"), !isTimerRunning ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 24\n    }\n  }, \"PAUSED\") : null);\n}\n\nexport default TimeDisplay;","map":{"version":3,"sources":["C:/Users/frank/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeDisplay.js"],"names":["React","minutesToDuration","secondsToDuration","TimeDisplay","props","onBreak","initFocusMins","initBreakMins","currentTimerMins","currentTimerSecs","isTimerRunning"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAE1B,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAACC,OAAD,GAAW,UAAX,GAAwB,UADzB,WAC0C,CAACA,OAAD,GAAWJ,iBAAiB,CAACK,aAAD,CAA5B,GAA8CL,iBAAiB,CAACM,aAAD,CADzG,aAFA,eAMA;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,iBAAiB,CAAEM,gBAAgB,GAAG,EAApB,GAA0BC,gBAA3B,CADpB,eANA,EASC,CAACC,cAAD,gBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlB,GAAoC,IATrC,CADF;AAaD;;AAED,eAAeP,WAAf","sourcesContent":["import React from 'react'\r\nimport { minutesToDuration } from '../utils/duration';\r\nimport {secondsToDuration} from '../utils/duration';\r\n\r\nfunction TimeDisplay(props) {\r\n\r\n  const {\r\n    onBreak,\r\n    initFocusMins,\r\n    initBreakMins,\r\n    currentTimerMins,\r\n    currentTimerSecs,\r\n    isTimerRunning\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"col\">\r\n    {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n    <h2 data-testid=\"session-title\">\r\n    {!onBreak ? \"Focusing\" : \"On Break\"} for {!onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins)} minutes\r\n    </h2>\r\n    {/* TODO: Update message below to include time remaining in the current session */}\r\n    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n      {secondsToDuration((currentTimerMins * 60) + currentTimerSecs)} remaining\r\n    </p>\r\n    {!isTimerRunning ? <h2>PAUSED</h2> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeDisplay\r\n"]},"metadata":{},"sourceType":"module"}