{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakControls from './BreakControls';\nimport FocusControls from './FocusControls';\nimport TimerControls from './TimerControls';\nimport TimeDisplay from './TimeDisplay';\nimport ProgressDisplay from './ProgressDisplay';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //  For button handlers:\n\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5); //  Initial States:\n\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5); //  Current States:\n\n  const [currentTimerMins, setCurrentTimerMins] = useState(25);\n  const [currentTimerSecs, setCurrentTimerSecs] = useState(0); //  Timer progress bar state:\n\n  const [progressBar, setProgressBar] = useState(0); // Session States:\n\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false); // Handle focus timer buttons:\n\n  const decreaseFocusTimer = () => {\n    if (focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  };\n\n  const increaseFocusTimer = () => {\n    if (focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }; // Handle break timer buttons:\n\n\n  const decreaseBreakTimer = () => {\n    if (breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  };\n\n  const increaseBreakTimer = () => {\n    if (breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  }; // Create a helper function that converts minutes and seconds into a percentage of initial duration:\n\n\n  function progPercentage(currentMins, currentSecs, initialDuration) {\n    return 100 - (currentMins * 60 + currentSecs) / (initialDuration * 60) * 100;\n  }\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setCurrentTimerSecs(second => {\n      //If the timer is zero restart, else subtract 1 second\n      second === 0 ? second = 59 : second -= 1;\n      if (second === 59) setCurrentTimerMins(minutes => currentTimerMins - 1);\n      return second;\n    });\n\n    if (onBreak) {\n      setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initBreakMins));\n    } else {\n      setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initFocusMins));\n    }\n\n    if (currentTimerMins === 0 && currentTimerSecs === 1) timerExpired();\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/0269.mp3');\n\n    if (initPlay) {\n      setInitFocusMins(minutes => minutes = focusTimerMins);\n      setInitBreakMins(minutes => minutes = breakTimerMins);\n      setCurrentTimerMins(minutes => minutes = focusTimerMins);\n      setInitPlay(state => state = false);\n    }\n\n    setActiveSession(state => state = true);\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stop() {\n    setInitPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerMins(minutes => minutes = focusTimerMins);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setInitFocusMins(minutes => minutes = focusTimerMins);\n    setInitBreakMins(minutes => minutes = breakTimerMins);\n  }\n\n  function timerExpired() {\n    !onBreak ? focusExpired() : breakExpired();\n  }\n\n  function focusExpired() {\n    new Audio().play();\n    setOnBreak(state => state = true);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initBreakMins);\n  }\n\n  function breakExpired() {\n    new Audio().play();\n    setOnBreak(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initFocusMins);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusControls, {\n    increaseFocusTimer: increaseFocusTimer,\n    decreaseFocusTimer: decreaseFocusTimer,\n    focusTimerMins: focusTimerMins,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakControls, {\n    increaseBreakTimer: increaseBreakTimer,\n    decreaseBreakTimer: decreaseBreakTimer,\n    breakTimerMins: breakTimerMins,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimerControls, {\n    playPause: playPause,\n    classNames: classNames,\n    isTimerRunning: isTimerRunning,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: activeSession ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TimeDisplay, {\n    onBreak: onBreak,\n    initBreakMins: initBreakMins,\n    initFocusMins: initFocusMins,\n    currentTimerMins: currentTimerMins,\n    currentTimerSecs: currentTimerSecs,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProgressDisplay, {\n    progressBar: progressBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/frank/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","BreakControls","FocusControls","TimerControls","TimeDisplay","ProgressDisplay","Pomodoro","isTimerRunning","setIsTimerRunning","focusTimerMins","setFocusTimerMins","breakTimerMins","setBreakTimerMins","initFocusMins","setInitFocusMins","initBreakMins","setInitBreakMins","currentTimerMins","setCurrentTimerMins","currentTimerSecs","setCurrentTimerSecs","progressBar","setProgressBar","initPlay","setInitPlay","activeSession","setActiveSession","onBreak","setOnBreak","decreaseFocusTimer","minutes","increaseFocusTimer","decreaseBreakTimer","increaseBreakTimer","progPercentage","currentMins","currentSecs","initialDuration","second","progress","timerExpired","playPause","Audio","state","prevState","stop","seconds","focusExpired","breakExpired","play","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakControls from './BreakControls';\nimport FocusControls from './FocusControls';\nimport TimerControls from './TimerControls';\nimport TimeDisplay from './TimeDisplay';\nimport ProgressDisplay from './ProgressDisplay';\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n    //  For button handlers:\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5);\n    //  Initial States:\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5);\n    //  Current States:\n  const [currentTimerMins, setCurrentTimerMins] = useState(25);\n  const [currentTimerSecs, setCurrentTimerSecs] = useState(0);\n    //  Timer progress bar state:\n  const [progressBar, setProgressBar] = useState(0);\n\n  // Session States:\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n\n  // Handle focus timer buttons:\n  const decreaseFocusTimer = () => {\n    if(focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  }\n  const increaseFocusTimer = () => {\n    if(focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }\n\n  // Handle break timer buttons:\n  const decreaseBreakTimer = () => {\n    if(breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  }\n  const increaseBreakTimer = () => {\n    if(breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  }\n\n  // Create a helper function that converts minutes and seconds into a percentage of initial duration:\n  function progPercentage(currentMins, currentSecs, initialDuration) {\n    return 100 - (((currentMins * 60) + currentSecs) / (initialDuration * 60) *100);\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setCurrentTimerSecs(second => {\n        //If the timer is zero restart, else subtract 1 second\n        second === 0 ? second = 59 : second -= 1;\n        if(second === 59) setCurrentTimerMins(minutes => currentTimerMins - 1);\n        return second;\n      });\n\n      if (onBreak) {\n        setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initBreakMins))\n      } else {\n        setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initFocusMins))\n      }\n\n      if (currentTimerMins === 0 && currentTimerSecs === 1) timerExpired();\n      \n\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    new Audio('https://bigsoundbank.com/UPLOAD/mp3/0269.mp3')\n    if (initPlay) {\n      setInitFocusMins(minutes => minutes = focusTimerMins);\n      setInitBreakMins(minutes => minutes = breakTimerMins);\n      setCurrentTimerMins(minutes => minutes = focusTimerMins);\n      setInitPlay(state => state = false);\n    }\n    setActiveSession(state => state = true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stop() {\n    setInitPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerMins(minutes => minutes = focusTimerMins);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setInitFocusMins(minutes => minutes = focusTimerMins);\n    setInitBreakMins(minutes => minutes = breakTimerMins);\n  }\n\n  function timerExpired() {\n    (!onBreak) ? focusExpired() : breakExpired();\n  }\n\n  function focusExpired() {\n    new Audio().play();\n    setOnBreak(state => state = true);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initBreakMins);\n  }\n\n  function breakExpired() {\n    new Audio().play();\n    setOnBreak(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initFocusMins);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusControls increaseFocusTimer={increaseFocusTimer} decreaseFocusTimer={decreaseFocusTimer} focusTimerMins={focusTimerMins}/>\n        <BreakControls increaseBreakTimer={increaseBreakTimer} decreaseBreakTimer={decreaseBreakTimer} breakTimerMins={breakTimerMins}/>\n      </div>\n      <div className=\"row\">\n        <TimerControls playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning} stop={stop} />\n      </div> \n      <div style={activeSession ? {display: 'block'} : {display: 'none'}}>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n        <TimeDisplay onBreak={onBreak} initBreakMins={initBreakMins} initFocusMins={initFocusMins} currentTimerMins={currentTimerMins} currentTimerSecs={currentTimerSecs} isTimerRunning={isTimerRunning} />\n        </div>\n        <div className=\"row mb-2\">\n        <ProgressDisplay progressBar={progressBar} />\n        </div>\n      </div> \n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}