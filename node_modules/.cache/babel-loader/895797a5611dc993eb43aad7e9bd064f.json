{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from '../utils/duration';\nimport { minutesToDuration } from '../utils/duration';\nimport Break from './Break';\nimport Focus from './Focus';\nimport TimerControls from './TimerControls';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //  For button handlers:\n\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5); //  Initial States:\n\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5); //  Current States:\n\n  const [currentTimerMins, setCurrentTimerMins] = useState(25);\n  const [currentTimerSecs, setCurrentTimerSecs] = useState(0); //  Timer progress bar state:\n\n  const [progressBar, setProgressBar] = useState(0); // Session States:\n\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false); // Handle focus timer buttons:\n\n  const decreaseFocusTimer = () => {\n    if (focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  };\n\n  const increaseFocusTimer = () => {\n    if (focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }; // Handle break timer buttons:\n\n\n  const decreaseBreakTimer = () => {\n    if (breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  };\n\n  const increaseBreakTimer = () => {\n    if (breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  }; // Create a helper function that converts minutes and seconds into a percentage of initial duration:\n\n\n  function progPercentage(currentMins, currentSecs, initialDuration) {\n    return 100 - (currentMins * 60 + currentSecs) / (initialDuration * 60) * 100;\n  }\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setCurrentTimerSecs(second => {\n      //If the timer is zero restart, else subtract 1 second\n      if (second === 0) {\n        second = 59;\n      } else {\n        second -= 1;\n      }\n\n      return second;\n    });\n\n    if (onBreak) {\n      setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initBreakMins));\n    } else {\n      setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initFocusMins));\n    }\n\n    if (currentTimerMins === 0 && currentTimerSecs === 1) sessionExpired();\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    if (initPlay) {\n      setInitFocusMins(minutes => minutes = focusTimerMins);\n      setInitBreakMins(minutes => minutes = breakTimerMins);\n      setCurrentTimerMins(minutes => minutes = focusTimerMins);\n      setInitPlay(state => state = false);\n    }\n\n    setActiveSession(state => state = true);\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stop() {\n    setInitPlay(state => state = true);\n    setIsTimerRunning(state => state = true);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerMins(minutes => minutes = focusTimerMins);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setInitFocusMins(minutes => minutes = focusTimerMins);\n    setInitBreakMins(minutes => minutes = breakTimerMins);\n  }\n\n  function sessionExpired() {\n    !onBreak ? focusExpired() : breakExpired();\n  }\n\n  function focusExpired() {\n    new Audio().play();\n    setOnBreak(state => state = true);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initBreakMins);\n  }\n\n  function breakExpired() {\n    new Audio().play();\n    setOnBreak(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initFocusMins);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    increaseFocusTimer: increaseFocusTimer,\n    decreaseFocusTimer: decreaseFocusTimer,\n    focusTimerMins: focusTimerMins,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    increaseBreakTimer: increaseBreakTimer,\n    decreaseBreakTimer: decreaseBreakTimer,\n    breakTimerMins: breakTimerMins,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }))))), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    style: activeSession ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, !onBreak ? \"Focusing\" : \"On Break\", \" for \", !onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, \"25:00 remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar}`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }))))), \" \");\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/frank/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","minutesToDuration","Break","Focus","TimerControls","Pomodoro","isTimerRunning","setIsTimerRunning","focusTimerMins","setFocusTimerMins","breakTimerMins","setBreakTimerMins","initFocusMins","setInitFocusMins","initBreakMins","setInitBreakMins","currentTimerMins","setCurrentTimerMins","currentTimerSecs","setCurrentTimerSecs","progressBar","setProgressBar","initPlay","setInitPlay","activeSession","setActiveSession","onBreak","setOnBreak","decreaseFocusTimer","minutes","increaseFocusTimer","decreaseBreakTimer","increaseBreakTimer","progPercentage","currentMins","currentSecs","initialDuration","second","progress","sessionExpired","playPause","state","prevState","stop","seconds","focusExpired","breakExpired","Audio","play","oi","display","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {secondsToDuration} from '../utils/duration';\nimport {minutesToDuration} from '../utils/duration';\nimport Break from './Break';\nimport Focus from './Focus';\nimport TimerControls from './TimerControls';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n\n  // Timer States:\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n    //  For button handlers:\n  const [focusTimerMins, setFocusTimerMins] = useState(25);\n  const [breakTimerMins, setBreakTimerMins] = useState(5);\n    //  Initial States:\n  const [initFocusMins, setInitFocusMins] = useState(25);\n  const [initBreakMins, setInitBreakMins] = useState(5);\n    //  Current States:\n  const [currentTimerMins, setCurrentTimerMins] = useState(25);\n  const [currentTimerSecs, setCurrentTimerSecs] = useState(0);\n    //  Timer progress bar state:\n  const [progressBar, setProgressBar] = useState(0);\n\n  // Session States:\n  const [initPlay, setInitPlay] = useState(true);\n  const [activeSession, setActiveSession] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n\n  // Handle focus timer buttons:\n  const decreaseFocusTimer = () => {\n    if(focusTimerMins > 5 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes -= 5);\n  }\n  const increaseFocusTimer = () => {\n    if(focusTimerMins < 60 && !isTimerRunning && initPlay) setFocusTimerMins(minutes => minutes += 5);\n  }\n\n  // Handle break timer buttons:\n  const decreaseBreakTimer = () => {\n    if(breakTimerMins > 1 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes -= 1);\n  }\n  const increaseBreakTimer = () => {\n    if(breakTimerMins < 15 && !isTimerRunning && initPlay) setBreakTimerMins(minutes => minutes += 1);\n  }\n\n  // Create a helper function that converts minutes and seconds into a percentage of initial duration:\n  function progPercentage(currentMins, currentSecs, initialDuration) {\n    return 100 - (((currentMins * 60) + currentSecs) / (initialDuration * 60) *100);\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setCurrentTimerSecs(second => {\n        //If the timer is zero restart, else subtract 1 second\n        if(second === 0) {\n          second = 59;\n        } else {\n          second -= 1;\n        }\n        return second;\n      });\n\n      if (onBreak) {\n        setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initBreakMins))\n      } else {\n        setProgressBar(progress => progress = progPercentage(currentTimerMins, currentTimerSecs, initFocusMins))\n      }\n\n      if (currentTimerMins === 0 && currentTimerSecs === 1) sessionExpired();\n      \n\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    if (initPlay) {\n      setInitFocusMins(minutes => minutes = focusTimerMins);\n      setInitBreakMins(minutes => minutes = breakTimerMins);\n      setCurrentTimerMins(minutes => minutes = focusTimerMins);\n      setInitPlay(state => state = false);\n    }\n    setActiveSession(state => state = true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stop() {\n    setInitPlay(state => state = true);\n    setIsTimerRunning(state => state = true);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerMins(minutes => minutes = focusTimerMins);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setInitFocusMins(minutes => minutes = focusTimerMins);\n    setInitBreakMins(minutes => minutes = breakTimerMins);\n  }\n\n  function sessionExpired() {\n    (!onBreak) ? focusExpired() : breakExpired();\n  }\n\n  function focusExpired() {\n    new Audio().play();\n    setOnBreak(state => state = true);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initBreakMins);\n  }\n\n  function breakExpired() {\n    new Audio().play();\n    setOnBreak(state => state = false);\n    setProgressBar(progress => progress = 0);\n    setCurrentTimerSecs(seconds => seconds = 0);\n    setCurrentTimerMins(minutes => minutes = initFocusMins);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus increaseFocusTimer={increaseFocusTimer} decreaseFocusTimer={decreaseFocusTimer} focusTimerMins={focusTimerMins}/>\n        <Break increaseBreakTimer={increaseBreakTimer} decreaseBreakTimer={decreaseBreakTimer} breakTimerMins={breakTimerMins}/>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stop}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div> {/*clip here*/}\n      <div style={activeSession ? {display: 'block'} : {display: 'none'}}>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">\n            {!onBreak ? \"Focusing\" : \"On Break\"} for {!onBreak ? minutesToDuration(initFocusMins) : minutesToDuration(initBreakMins)}\n            </h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              25:00 remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progressBar} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBar}` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div> {/*clip here*/}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}